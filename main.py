import os

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.filters import ChatMemberUpdatedFilter, KICKED, MEMBER
from aiogram.filters import BaseFilter
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import ChatMemberUpdated

BOT_TOKEN = os.getenv('BOT_TOKEN')

TEXT_START = ('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª. '
              '–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ '
              '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–∞–Ω–∞–ª–æ–≤. '
              '–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!')
TEXT_HELP = ('/start - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 1 —Ä–∞–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n'
             '/help - –≤—ã–∑–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º')

# —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞
admin_ids: list[int] = [214904629]

users = {}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


class IsAdmin(BaseFilter):
    def __init__(self, admin_ids: list[int]) -> None:
        self.admin_ids = admin_ids

    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in self.admin_ids


# –≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
# –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Ö—ç–Ω–¥–ª–µ—Ä –∏—Ö —Å–ø–∏—Å–æ–∫
class NumbersInMessage(BaseFilter):
    async def __call__(self, message: Message) -> bool | dict[str, list[int]]:
        numbers = []
        # –°–ø–ª–∏—Ç—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—É —á–∞—Å—Ç—å, —É–¥–∞–ª—è—è
        # –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ,
        # —á—Ç–æ –≤ —Ç–∞–∫–∏—Ö —Å–ª–æ–≤–∞—Ö —Ç–æ–ª—å–∫–æ —Ñ–∏—Ü—Ä—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ü–µ–ª—ã–º —á–∏—Å–ª–∞–º
        # –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        for word in message.text.split():
            normalized_word = word.replace('.', '').replace(',', '').strip()
            if normalized_word.isdigit():
                numbers.append(int(normalized_word))
        # –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å —á–∏—Å–ª–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∏—Å–µ–ª –ø–æ –∫–ª—é—á—É 'numbers'
        if numbers:
            return {'numbers': numbers}
        return False


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞
async def create_contact_keyboard():
    button = [[KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]]
    keyboard = ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True, one_time_keyboard=True)
    return keyboard


@dp.message(IsAdmin(admin_ids) and Command(commands='alarm'))
async def process_alarm_all_users(message: Message):
    await bot.send_message(chat_id='-1002492032591', text='–ê–¥–º–∏–Ω –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ê–õ–ê–†–ú –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')


async def process_start_command(message: Message):
    print('–∑–¥–µ—Å—å')
    if message.from_user.id not in users:
        users[message.from_user.id] = {
            'ip_adresses': None,
            'web_services': None,
            'mode': None,
            'active': True,
            'def': None
        }
    if users[message.from_user.id]['def'] is None:
        await message.answer(text=TEXT_START)
        markup = await create_contact_keyboard()
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=markup)
    else:
        await message.answer(text='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n'
                                  '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /help')


@dp.message(F.contact)
async def get_contact(message: Message):
    contact = message.contact
    await message.answer(f"–°–ø–∞—Å–∏–±–æ{', ' + contact.first_name if contact.first_name else ''}. "
                         f"–í–∞—à –Ω–æ–º–µ—Ä {contact.phone_number} –±—ã–ª –ø–æ–ª—É—á–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    users[message.from_user.id]['def'] = contact.phone_number
    print(contact)


async def process_help_command(message: Message):
    await message.answer(text=TEXT_HELP)


# —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
@dp.message(F.text.lower().startswith('–Ω–∞–π–¥–∏ —á–∏—Å–ª–∞'),
            NumbersInMessage())
async def process_if_numbers(message: Message, numbers: list[int]):
    await message.answer(text=f'–ù–∞—à—ë–ª: {", ".join(str(num) for num in numbers)}')


# —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ù–ï –Ω–∞—à–µ–ª —á–∏—Å–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
@dp.message(F.text.lower().startswith('–Ω–∞–π–¥–∏ —á–∏—Å–ª–∞'))
async def process_if_numbers(message: Message):
    await message.answer(text='–ù–µ –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ –∑–¥–µ—Å—å —á–∏—Å–µ–ª üò®')


async def print_update(message: Message):
    txt = (f'{'=' * 10}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {message.from_user.id}\n'
           f'Login –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {message.from_user.username}\n'
           f'Message:\n'
           f'{'-' * 10}\n{message.text}\n{'=' * 10}')
    await bot.send_message(chat_id='-1002492032591', text=txt)
    print(message)


@dp.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def process_user_blocked_bot(event: ChatMemberUpdated):
    await bot.send_message(chat_id='-1002492032591',
                           text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª üü¢ –±–æ—Ç–∞ Neuron.')


@dp.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def process_user_blocked_bot(event: ChatMemberUpdated):
    await bot.send_message(chat_id='-1002492032591',
                           text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª üî¥ –±–æ—Ç–∞ Neuron.')


dp.message.register(process_start_command, Command(commands='start'))
dp.message.register(process_help_command, Command(commands='help'))
dp.message.register(print_update)

if __name__ == '__main__':
    dp.run_polling(bot)
